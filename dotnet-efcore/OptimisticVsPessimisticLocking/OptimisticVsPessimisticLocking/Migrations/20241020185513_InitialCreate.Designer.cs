// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OptimisticVsPessimisticLocking;

#nullable disable

namespace OptimisticVsPessimisticLocking.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241020185513_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OptimisticVsPessimisticLocking.Entities.WorkItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkItems");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Write an article about optimistic and pessimistic database locking",
                            DueDate = new DateTime(2024, 10, 25, 21, 55, 13, 332, DateTimeKind.Local).AddTicks(7509),
                            Status = "Open",
                            Title = "Optimistic vs Pessimistic locking"
                        });
                });

            modelBuilder.Entity("OptimisticVsPessimisticLocking.Entities.WorkItemWithConcurrencyToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("WorkItemsWithConcurrencyToken");

                    b.HasData(
                        new
                        {
                            Id = 3L,
                            Description = "Write an article about optimistic and pessimistic database locking",
                            DueDate = new DateTime(2024, 10, 25, 21, 55, 13, 332, DateTimeKind.Local).AddTicks(7725),
                            Status = "Open",
                            Title = "Optimistic vs Pessimistic locking",
                            Version = 0L
                        });
                });

            modelBuilder.Entity("OptimisticVsPessimisticLocking.Entities.WorkItemWithRowVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkItemsWithRowVersion");

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            Description = "Write an article about optimistic and pessimistic database locking",
                            DueDate = new DateTime(2024, 10, 25, 21, 55, 13, 332, DateTimeKind.Local).AddTicks(7699),
                            Status = "Open",
                            Title = "Optimistic vs Pessimistic locking"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
